/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*//**
 * JavaCC file
 */
 
options {
               
                              
                      
    DEBUG_PARSER=true;
    STATIC=false;
    IGNORE_CASE=true;
    ERROR_REPORTING=true;
    UNICODE_INPUT = false;
}
PARSER_BEGIN(Parser)

package edu.davinci.lenguaje;

import java.text.MessageFormat;
import edu.davinci.utils.Resource;

public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/
	
	
	public Node rootNode() {
    	return jjtree.rootNode();
  	}

  	//**********************************************************************//
  	//****************** METODOS HELPERS COMPILACION **********************//

    SymbolTable st_identificador = new SymbolTableImpl();
    SymbolTable st_subprograma   = new SymbolTableImpl();
    SymbolTable st_hilo 	 = new SymbolTableImpl();
    
    private String ambito="";
    private int definicion;

	/**
	* Retorna el ambito/contexto donde nos encontramos 
	*/
     String getAmbito(){
		return ambito;
	}

    /**
	*
	*/
     void setAmbito(String amb){
      ambito = amb;
    }

    /**
	*
	*/
     int getDefinicion(){
		return definicion;
	}

    /**
	*
	*/
     void setDefinicion(int def){
      definicion = def;
    }

	/**
	*
	*/
     public void verificarIdentificador(Token t)throws ParseException{  	
		//verificamos el ambito del identificador
  	    if(getDefinicion()==0){
  	        //se corresponde con un identificador global  
	    	if(!st_identificador.verificarDeclaracion(t.image))
	    		//System.out.println(MessageFormat.format(Resource.getString("parser.identificadorNoDefinido"), id));
				throw new ParseException(MessageFormat.format(Resource.getString("parser.identificador.desconocido"), t.image,t.beginLine,t.beginColumn));

	    }else if(getDefinicion()== SUBPROGRAM){
	    	//se corresponde con un identificador de procedimiento
	    	String procedimiento = getAmbito();
	    	if(!st_subprograma.verificarDeclaracion(procedimiento, t.image))
	    		//verificamos si esta definido como global
	    		if(!st_identificador.verificarDeclaracion(t.image))
					throw new ParseException(MessageFormat.format(Resource.getString("parser.procedimiento.identificador.desconocido"),  t.image,t.beginLine,t.beginColumn));

	    }else if(getDefinicion()==THREADS){
	      	//se corresponde con un identificador de hilo
	    	String hilo = getAmbito();
	    	if(!st_hilo.verificarDeclaracion(hilo, t.image))
	    		//verificamos si esta definido como global
	    		if(!st_identificador.verificarDeclaracion(t.image))
    				throw new ParseException(MessageFormat.format(Resource.getString("parser.hilo.identificador.desconocido"),  t.image,t.beginLine,t.beginColumn));
					
	    }

   		
  	}

  	/**
	*
	*/
     public void verificarSubprograma(Token identificador)throws ParseException{  	
   		if(!st_subprograma.verificarDeclaracion(identificador.image))
			throw new ParseException(MessageFormat.format(Resource.getString("parser.procedimiento.identificador.desconocido"), identificador.image, identificador.beginLine, identificador.beginColumn));
  	}

  	/**
	*
	*/
     public void verificarHilo(Token t)throws ParseException{
       
   		if(!st_hilo.verificarDeclaracion(t.image))
   			throw new ParseException(MessageFormat.format(Resource.getString("parser.hilo.identificador.desconocido"),  t.image,t.beginLine,t.beginColumn));
			//throw new ParseException(MessageFormat.format(Resource.getString("parser.hilo.identificador.desconocido"), id));
  	}
  	
	
	/**
	*
	*/
  	 public void insertarIdentificador(Token t, int type)throws ParseException{
  	   String id = t.image;
  	  	//verificamos el ambito del identificador
  	  	if(getDefinicion()==0){
  	  		//se corresponde con un identificador global  
	    	if(!st_identificador.agregarSimbolo(id, type))
  				throw new ParseException(MessageFormat.format(Resource.getString("parser.identificador.duplicado"), id,t.beginLine,t.beginColumn));
	    	  
	    }else if(getDefinicion()==SUBPROGRAM){
	    	//se corresponde con un identificador global
	    	String procedimiento = getAmbito();  
	    	if(!st_subprograma.agregarSimbolo(procedimiento,id, type))
	    	  throw new ParseException(MessageFormat.format(Resource.getString("parser.procedimiento.identificador.duplicado"),procedimiento, id,t.beginLine,t.beginColumn));
	    	  
	    }else if(getDefinicion()==THREADS){
	        String hilo = getAmbito();  
	    	if(!st_hilo.agregarSimbolo(hilo, id, type))
	    	  throw new ParseException(MessageFormat.format(Resource.getString("parser.hilo.identificador.duplicado"), hilo,id,t.beginLine,t.beginColumn));
	    }
  	}

	/**
	*
	*/
  	public void insertarSubprograma(Token t)throws ParseException{
  	   String id = t.image;
    	if(!st_subprograma.agregarSimbolo(id, SUBPROGRAM))
    		throw new ParseException(MessageFormat.format(Resource.getString("parser.identificador.duplicado"),id,t.beginLine,t.beginColumn));
    	  
  	}

        public void insertarTipoFuncion(Token t, int type)throws ParseException{
  	   String id = t.image;
    	   st_subprograma.setTipo(id, type);
  	}

	/**
	*
	*/
  	 public void insertarHilo(Token t)throws ParseException{
  	   String id = t.image;
    	if(!st_hilo.agregarSimbolo(id, THREAD))
    		throw new ParseException(MessageFormat.format(Resource.getString("parser.identificador.duplicado"),id,t.beginLine,t.beginColumn));
    		  
  	}

  	/**
	*
	*/
  	 public int obtenerTipo(Token t)throws ParseException{
		String id = t.image;
		//verificamos el ambito del identificador
  	  	if(getDefinicion()==0){
  	  		//se corresponde con un identificador global  
	    	return st_identificador.getTipo(id);
	    }else if(getDefinicion()==SUBPROGRAM){
	    	//se corresponde con un identificador de procedimiento
	    	String procedimiento = getAmbito();
	    	//verificamos si es global
	    	if(st_subprograma.getTipo(procedimiento, id)==0)
				return st_identificador.getTipo(id);
	    	else
	    		return st_subprograma.getTipo(procedimiento, id);
	    }else if(getDefinicion()==THREADS){
	    	//se corresponde con un identificador de hilo
	    	String hilo = getAmbito();
	    	//verificamos si es global
	    	if(st_hilo.getTipo(hilo, id)==0)
				return st_identificador.getTipo(id);
	    	else 
	    		return st_hilo.getTipo(hilo, id);
	    }else
			throw new ParseException(MessageFormat.format(Resource.getString("parser.identificador.incompatible"), id,t.beginLine,t.beginColumn));
  	}

        public int obtenerTipoFuncion(Token t)throws ParseException{
		String id = t.image;
	    	
                //retornamos el tipo
	    	return st_subprograma.getTipo(id);
        }

	/**
	*
	*/
  	 public void verificarTipos(Token t,int tipoA, int tipoB)throws ParseException{
  	    //La verificacion de tipos del los semaforos es diferente al resto
		if (tipoB == SEMAPHORE){
		  	if(tipoA != SEMAPHORE_BINARY && tipoA != SEMAPHORE_GENERAL)
			  	throw new ParseException(MessageFormat.format(Resource.getString("parser.tipo.incompatible"), t.beginLine,t.beginColumn));
		}else{
		  	//el resto de los tipos
			if (tipoA!=tipoB)
				throw new ParseException(MessageFormat.format(Resource.getString("parser.tipo.incompatible"), t.beginLine,t.beginColumn));
				//System.out.println(MessageFormat.format(Resource.getString("parser.tiposDeDatoIncompatibles"), t.beginLine,t.beginColumn));
			
		}	
  	}

	/**
	*
	*/
  	 public void verificarTipos(Token t,int tipoA, int tipoB, int operador)throws ParseException{
		if (tipoA!=tipoB)
				throw new ParseException(MessageFormat.format(Resource.getString("parser.tipo.incompatible"), t.beginLine,t.beginColumn));
        else{
          //Tipos coinciden, verificamos si tambien con el operador
          if((operador==EQ)|(operador==NE)){
			  if((tipoA==SEMAPHORE_BINARY)|(tipoA==SEMAPHORE_GENERAL))
			  		throw new ParseException(MessageFormat.format(Resource.getString("parser.tipo.incompatible"), t.beginLine,t.beginColumn));
		  }else if((operador==PLUS)|(operador==LE)|(operador==GT)){
			  if(tipoA==BOOLEAN)
			  		throw new ParseException(MessageFormat.format(Resource.getString("parser.tipo.incompatible"), t.beginLine,t.beginColumn));
		  }else if((operador==MINUS)|(operador==PROD)|(operador==DIV)|(operador==MOD)){
			  if((tipoA==BOOLEAN)|(tipoA==STRING))
			  		throw new ParseException(MessageFormat.format(Resource.getString("parser.tipo.incompatible"), t.beginLine,t.beginColumn));
		  }else if((operador==OR)|(operador==AND)){
			  if((tipoA==INTEGER)|(tipoA==STRING))
			  		throw new ParseException(MessageFormat.format(Resource.getString("parser.tipo.incompatible"), t.beginLine,t.beginColumn));
		  }
	    }
  	}

  	
	//El padre lo da el ambito
	 public void agregarParametroProcedimiento(Token t,int type, int input_output)throws ParseException{
	    String id = t.image;
	    String padre=getAmbito();
		try
		{	
		    //establecemos si el parametro q agregamos es de salida
		    boolean esDeSalida=input_output==OUTPUT |input_output==INPUTOUTPUT;
		    st_subprograma.agregarParametro(padre,id,type,esDeSalida);
		}catch(Exception e){
		  throw new ParseException(MessageFormat.format(Resource.getString("parser.procedimiento.parametro.incompatible"), padre,id,t.beginLine,t.beginColumn));
		    
		}    	
  	}

  	 public void verificarParametroSubprograma(Token identificador,int type, int input_output, int order)throws ParseException{
  	   String nombre = identificador.image;
  	    //verificamos si el parametro con el q llamamos es de salida
	    boolean esDeSalida=input_output==OUTPUT |input_output==INPUTOUTPUT;
	    if(!st_subprograma.verificarParametro(nombre,type,esDeSalida,order))
	    	throw new ParseException(MessageFormat.format(Resource.getString("parser.procedimiento.argumento.incompatible"), identificador.beginLine,identificador.beginColumn));
	    	
  	}

  	 public void verificarCantidadParametrosSubprograma(Token identificador,int cant)throws ParseException{
  	   String nombre = identificador.image;
	    if(!st_subprograma.verificarCantidadDeParametros(nombre,cant))
	    	throw new ParseException(MessageFormat.format(Resource.getString("parser.procedimiento.parametro.cantidad.diferente"), identificador.beginLine,identificador.beginColumn));
  	}

	 public void agregarParametroHilo(Token t,int type)throws ParseException{
	    String id = t.image;
		String padre=getAmbito();
		try
		{	
		    //establecemos si el parametro q agregamos es de salida
		    boolean esDeSalida=false;
		    st_hilo.agregarParametro(padre,id,type,esDeSalida);
		}catch(Exception e){
		    throw new ParseException(MessageFormat.format(Resource.getString("parser.procedimiento.parametro.incompatible"), padre,id,t.beginLine,t.beginColumn));
		}    	
  	}

	 public void verificarParametroHilo(Token t,int type, int order)throws ParseException{
  	    //verificamos si el parametro con el q llamamos es de salida
	    boolean esDeSalida=false;
	    if(!st_hilo.verificarParametro(t.image,type,esDeSalida,order))
	    	throw new ParseException(MessageFormat.format(Resource.getString("parser.hilo.argumento.incompatible"), t.beginLine,t.beginColumn));
	    	
  	}

  	 public void verificarCantidadParametrosHilo(Token t,int cant)throws ParseException{
	    if(!st_hilo.verificarCantidadDeParametros(t.image,cant))
	    	throw new ParseException(MessageFormat.format(Resource.getString("parser.hilo.parametro.cantidad.diferente"), t.beginLine,t.beginColumn));
	    	
  	}
  	
}
PARSER_END(Parser)

/* SEPARADORES */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMENTARIOS */

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" ( ~["\n","\r"] )* ("\n" | "\r" | "\r\n") >
|
  //<MULTI_LINE_COMMENT: "/*" ( ~["*"] | ("*")+ ~["*","/"] )* ("*")+ "/" >
  <MULTI_LINE_COMMENT: "{" ( ~["}"] )* "}" >
}


/* PALABRAS RESERVADAS */

TOKEN :
{
  < BOOLEAN: "logico" >
| < STRING: "texto" >
| < INTEGER: "numero" >
| < TRUE: "v" >
| < FALSE: "f" >
| < PROGRAM: "programa" >
| < SUBPROGRAM: "subprogramas" >
| < PROCEDURE: "procedimiento" >
| < FUNCTION: "funcion" >
| < RETURN: "retornar" >
| < INPUT: "en" >
| < OUTPUT: "sa" >
| < INPUTOUTPUT: "es" >
| < VAR: "variables" >
| < BEGIN: "comenzar" >
| < IF: "si" >
| < ELSE: "sino" >
| < WHILE: "mientras" >
| < REPEAT: "repetir" >
| < END: "fin" >
| < START: "iniciar" >
| < MOVE: "mover" >
| < RIGHT: "derecha" >
| < TAKEFLOWOR: "tomarFlor" >
| < TAKEPAPER: "tomarPapel" >
| < PUTFLOWER: "depositarFlor" >
| < PUTPAPER: "depositarPapel" >

| < POSAV :"PosAv" >
| < POSCA :"PosCa" >
| < HAYFLORENLAESQUINA :"HayFlorEnLaEsquina" >
| < HAYFLORENLABOLSA: "HayFlorEnLaBolsa" >
| < HAYPAPELENLAESQUINA :"HayPapelEnLaEsquina" >
| < HAYPAPELENLABOLSA :"HayPapelEnLaBolsa" >
| < HAYOBSTACULO :"HayObstaculo" >
| < HAYROBOT : "HayRobot" >
| < MESSAGE: "Informar" >
| < READ: "Pedir">
| < POSITION: "Pos">

| < THREADS: "hilos" >
| < THREAD: "hilo" >
| < THREAD_START: "arrancar" >

| < SEMAPHORE: "_semaforo_" >
| < SEMAPHORE_BINARY: "semaforoBinario">
| < SEMAPHORE_GENERAL: "semaforoGeneral">
| < SEMAPHORE_INIT: "iniciarSemaforo" >
| < SIGNAL: "Avisar">
| < WAIT  : "Esperar">

| < RANDOM  : "Aleatorio">
| < LENGTH  : "Longitud">
| < SUBSTRING  : "Sustraer">
| < NUMBERTOTEXT : "NumeroATexto">
| < TEXTTONUMBER : "TextoANumero">
| < LOGICTOTEXT  : "LogicoATexto">

| < LOWERCASE  : "Minuscula">
| < UPPERCASE  : "Mayuscula">
| < TRIM  : "Cortar">
| < REPLACE  : "Reemplazar">
| < STARTSWITH  : "Comienzacon">
| < ENDSWITH  : "Terminacon">
| < INDEXOF  : "Indicede">


| < SQRT  : "Raiz">
| < POW  : "Potencia">
| < MAX  : "MayorValor">
| < SIN  : "Seno">
| < COS  : "Coseno">
| < TAN  : "Tangente">
| < LOG  : "Logaritmo">

| < RANDOMLET  : "LetraAleatoria">

}

/* LITERALES */

TOKEN :
{
  < INTEGER_LITERAL: ["0"-"9"] (["0"-"9"])* >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >

}

/* IDENTIFICADORES */

TOKEN :
{
  < IDENTIFIER: ["a"-"z","A"-"Z","_","?","?"] ( ["a"-"z","A"-"Z","0"-"9","_","?","?"] )* >
}


/* SEPARADORES */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < COLON: ":" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: ":=" >
| < EQ: "=" >
| < LE: "<=" >
| < GT: ">" >
| < LT: "<" >
| < GE: ">=" >
| < NE: "<>" >
| < OR: "|" >
| < AND: "&" >
| < NOT: "!" >
| < PLUS: "+" >
| < MINUS: "-" >
| < PROD: "*" >
| < DIV: "/" >
| < MOD: "%" >
}

//*****************************************************//
//*****************************************************//

//***********************//
SimpleNode Compilar(): {/*@bgen(jjtree) Compilar */
  ASTCompilar jjtn000 = new ASTCompilar(JJTCOMPILAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Compilar */
  try {
/*@egen*/

  < PROGRAM > <IDENTIFIER> 
  Declaraciones()
  Cuerpo()
  < EOF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
	
}
//**********************//
void Declaraciones()      : {}
{
  
  [Variables()]
  [subprogramas()]
  [Hilos()]
  
  //Seteamos el ambito global
  {setDefinicion(0);setAmbito("");}
  [Variables()]
  
  
}

//**************//
void Cuerpo()      : {}
{
  < BEGIN >
  (Sentencia())*
  < END >
}

//***************//
void Hilos()      : {}
{
  < THREADS >{setDefinicion(THREADS);}
  (DefinicionHilo())+
}

//************************//
void DefinicionHilo()                :
{/*@bgen(jjtree) DefinicionHilo */
 ASTDefinicionHilo jjtn000 = new ASTDefinicionHilo(JJTDEFINICIONHILO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;
}
{/*@bgen(jjtree) DefinicionHilo */
 try {
/*@egen*/
 
 (
    < THREAD > identificador=< IDENTIFIER >
    				{
    				 insertarHilo(identificador);
    				 //seteamos el ambito para q cuando se definan variables o se usen sean del ambito del hilo
    				 setAmbito(identificador.image);
    				}
    				[<LPAREN > ParametrosFormalesHilo() < RPAREN >]
  [Variables()]
  Cuerpo()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/

  {
    //Nombre del hilo
    jjtn000.nombre=identificador.image;
  }
)/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

//************************//
void ParametrosFormalesHilo()                        :{/*@bgen(jjtree) ParametrosFormalesHilo */
  ASTParametrosFormalesHilo jjtn000 = new ASTParametrosFormalesHilo(JJTPARAMETROSFORMALESHILO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ParametrosFormalesHilo */
   try {
/*@egen*/ 
   ( ParametroFormalEntradaHilo()
     ( < SEMICOLON > ParametroFormalEntradaHilo())*
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/
}


//********************************************//
void ParametroFormalEntradaHilo()                            :
{/*@bgen(jjtree) ParametroFormalEntradaHilo */
 ASTParametroFormalEntradaHilo jjtn000 = new ASTParametroFormalEntradaHilo(JJTPARAMETROFORMALENTRADAHILO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;
 int tipo;}
{/*@bgen(jjtree) ParametroFormalEntradaHilo */
  try {
/*@egen*/
  < INPUT > identificador=< IDENTIFIER > < COLON > tipo=TipoPrimitivo()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    //insertamos el identificador y el tipo
    insertarIdentificador(identificador,tipo);

    //agregamos al padre el parametro
    agregarParametroHilo(identificador,tipo);

	//guardamos los datos del identificador
    jjtn000.nombre=identificador.image;
    jjtn000.tipo=tipo;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}




//***************//
void subprogramas()      : {}
{
  < SUBPROGRAM >{setDefinicion(SUBPROGRAM);}
  (DefinicionProcedimiento()
    | 
   DefinicionFuncion())+
}

//************************//
void DefinicionProcedimiento()                         :
{/*@bgen(jjtree) DefinicionProcedimiento */
 ASTDefinicionProcedimiento jjtn000 = new ASTDefinicionProcedimiento(JJTDEFINICIONPROCEDIMIENTO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;
}
{/*@bgen(jjtree) DefinicionProcedimiento */
 try {
/*@egen*/
 
 (
    < PROCEDURE > identificador=< IDENTIFIER >
    				{
    				 //String nombreProcedimiento=t.image;
    				 insertarSubprograma(identificador);
    				 //seteamos el ambito para q cuando se definan variables o se usen sean del ambito del procedimiento
    				 setAmbito(identificador.image);
    				}
    				[<LPAREN > ParametrosFormales() < RPAREN >] 
  [Variables()]
  Cuerpo()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/

  {
    jjtn000.nombre=identificador.image;
  }
)/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
   
}

void DefinicionFuncion()                   :
{/*@bgen(jjtree) DefinicionFuncion */
 ASTDefinicionFuncion jjtn000 = new ASTDefinicionFuncion(JJTDEFINICIONFUNCION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;
int tipoF,tipoE;
}
{/*@bgen(jjtree) DefinicionFuncion */
 try {
/*@egen*/
 (
    < FUNCTION > identificador=< IDENTIFIER >
    				{
    				 //
    				 insertarSubprograma(identificador);
    				 //seteamos el ambito para q cuando se definan variables o se usen sean del ambito de la funcion
    				 setAmbito(identificador.image);
    				}
    				[<LPAREN > ParametrosFormales() < RPAREN >] < COLON > tipoF = TipoPrimitivo()
                                {
                                 insertarTipoFuncion(identificador,tipoF);
                                }
        
        //variables de la nueva funcion
        [Variables()]

        //nuevo cuerpo() de la funcion
        < BEGIN >
            (Sentencia())*
            < RETURN >/*@bgen(jjtree) #FuncionUsuarioRetorno(true) */
                {
                  ASTFuncionUsuarioRetorno jjtn001 = new ASTFuncionUsuarioRetorno(JJTFUNCIONUSUARIORETORNO);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ 
                //
                tipoE=Expresion()/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                         
                {
                verificarTipos(token,tipoF,tipoE);
                }
        < END >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/

  {
    jjtn000.nombre=identificador.image;
  }
 )/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/ 
}
//************************//
void ParametrosFormales()                    :{/*@bgen(jjtree) ParametrosFormales */
  ASTParametrosFormales jjtn000 = new ASTParametrosFormales(JJTPARAMETROSFORMALES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ParametrosFormales */
   try {
/*@egen*/ 
   ( ParametroFormal()
     ( < SEMICOLON > ParametroFormal())*
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/
}

//*********************//
void ParametroFormal()      :{}
{
  ParametroFormalEntrada()
	| ParametroFormalSalida()
	| ParametroFormalEntradaSalida()
  
}

//********************************************//
void ParametroFormalEntrada()                        :
{/*@bgen(jjtree) ParametroFormalEntrada */
 ASTParametroFormalEntrada jjtn000 = new ASTParametroFormalEntrada(JJTPARAMETROFORMALENTRADA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;
 int tipo;}
{/*@bgen(jjtree) ParametroFormalEntrada */
  try {
/*@egen*/
  < INPUT > identificador=< IDENTIFIER > < COLON > tipo=TipoPrimitivo()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    //insertamos el identificador y el tipo
    insertarIdentificador(identificador,tipo);

    //agregamos al padre el parametro
    agregarParametroProcedimiento(identificador,tipo,INPUT);

	//guardamos los datos del identificador
    jjtn000.nombre=identificador.image;
    jjtn000.tipo=tipo;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//*******************************************//
void ParametroFormalSalida()                       :
{/*@bgen(jjtree) ParametroFormalSalida */
 ASTParametroFormalSalida jjtn000 = new ASTParametroFormalSalida(JJTPARAMETROFORMALSALIDA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;
 int tipo;}
{/*@bgen(jjtree) ParametroFormalSalida */
  try {
/*@egen*/
  < OUTPUT > identificador=< IDENTIFIER > < COLON > tipo=TipoPrimitivo()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    //insertamos el identificador y el tipo
    insertarIdentificador(identificador,tipo);
    
    //agregamos al padre el parametro
    agregarParametroProcedimiento(identificador,tipo,OUTPUT);

	//guardamos los datos del identificador
    jjtn000.nombre=identificador.image;
    jjtn000.tipo=tipo;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//**************************************************//
void ParametroFormalEntradaSalida()                              :
{/*@bgen(jjtree) ParametroFormalEntradaSalida */
 ASTParametroFormalEntradaSalida jjtn000 = new ASTParametroFormalEntradaSalida(JJTPARAMETROFORMALENTRADASALIDA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;
 int tipo;}
{/*@bgen(jjtree) ParametroFormalEntradaSalida */
  try {
/*@egen*/
  < INPUTOUTPUT > identificador=< IDENTIFIER > < COLON > tipo=TipoPrimitivo()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    //insertamos el identificador y el tipo
    insertarIdentificador(identificador,tipo);

    //agregamos al padre el parametro
    agregarParametroProcedimiento(identificador,tipo,INPUTOUTPUT);

	//guardamos los datos del identificador
    jjtn000.nombre=identificador.image;
    jjtn000.tipo=tipo;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//***************//
void Variables()      :{}
{
  < VAR >
  (DefinicionVariable())+ 
}

//************************//
void DefinicionVariable():
{/*@bgen(jjtree) DefinicionVariable */
  ASTDefinicionVariable jjtn000 = new ASTDefinicionVariable(JJTDEFINICIONVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token identificador; int tipo;}
{/*@bgen(jjtree) DefinicionVariable */
  try {
/*@egen*/
  identificador = <IDENTIFIER>
  		{
  		  jjtn000.setNombre(identificador.image);
  		}
      < COLON >
      tipo = TipoPrimitivo()/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
      }
/*@egen*/
      {
        insertarIdentificador(identificador,tipo);
        jjtn000.tipo=tipo;
      }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
      
}

int TipoPrimitivo()      :
{}
{
	(
  		  < INTEGER > 
		| < BOOLEAN >
		| < STRING >
		| < SEMAPHORE_BINARY >
		| < SEMAPHORE_GENERAL >
     )
     {
       return token.kind;
     }
      
}
//***************//
void Sentencia()      :{}
{
    
  (
    Primitiva()
   |SentenciaSimple()
   |SentenciaCompuesta()
  )
  
}

//***************//
void Primitiva()      :{}
{/*@bgen(jjtree) Pri_Iniciar */
  {
    ASTPri_Iniciar jjtn001 = new ASTPri_Iniciar(JJTPRI_INICIAR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
 
  < START >/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/ 	             
|/*@bgen(jjtree) Pri_Mover */
  {
    ASTPri_Mover jjtn002 = new ASTPri_Mover(JJTPRI_MOVER);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtn002.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ < MOVE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtn002.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/ 		           
|/*@bgen(jjtree) Pri_Derecha */
  {
    ASTPri_Derecha jjtn003 = new ASTPri_Derecha(JJTPRI_DERECHA);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtn003.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ < RIGHT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtn003.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/		             
|/*@bgen(jjtree) Pri_TomarFlor */
  {
    ASTPri_TomarFlor jjtn004 = new ASTPri_TomarFlor(JJTPRI_TOMARFLOR);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtn004.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ < TAKEFLOWOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtn004.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/               
|/*@bgen(jjtree) Pri_TomarPapel */
  {
    ASTPri_TomarPapel jjtn005 = new ASTPri_TomarPapel(JJTPRI_TOMARPAPEL);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtn005.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ < TAKEPAPER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005, true);
      jjtn005.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                 
|/*@bgen(jjtree) Pri_DepositarFlor */
  {
    ASTPri_DepositarFlor jjtn006 = new ASTPri_DepositarFlor(JJTPRI_DEPOSITARFLOR);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtn006.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ < PUTFLOWER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006, true);
      jjtn006.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                    
|/*@bgen(jjtree) Pri_DepositarPapel */
  {
    ASTPri_DepositarPapel jjtn007 = new ASTPri_DepositarPapel(JJTPRI_DEPOSITARPAPEL);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
    jjtn007.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ < PUTPAPER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007, true);
      jjtn007.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                      
}

//*********************//
void SentenciaSimple()      :{}
{
  LOOKAHEAD(2)
  Asignacion()
| Invocacion()
}

//****************//
void Asignacion()               :
{/*@bgen(jjtree) #Asignacion( 2) */
 ASTAsignacion jjtn000 = new ASTAsignacion(JJTASIGNACION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipoI,tipoE;}
{/*@bgen(jjtree) #Asignacion( 2) */
  try {
/*@egen*/
  tipoI=Identificador() <ASSIGN> tipoE=Expresion()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000,  2);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {verificarTipos(token,tipoI,tipoE);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  2);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//*******************//
int Identificador():
{/*@bgen(jjtree) Identificador */
 ASTIdentificador jjtn000 = new ASTIdentificador(JJTIDENTIFICADOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;}
{/*@bgen(jjtree) Identificador */
  try {
/*@egen*/
  identificador= < IDENTIFIER >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
  	{
  	  //verificamos que exista
  	  verificarIdentificador(identificador);

	  //guardamos el nombre del identificador
  	  jjtn000.setNombre(identificador.image);

  	  //retornamos el tipo del identificador
  	  return obtenerTipo(identificador);
  	}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

int FuncionUsuario()                :
{/*@bgen(jjtree) FuncionUsuario */
 ASTFuncionUsuario jjtn000 = new ASTFuncionUsuario(JJTFUNCIONUSUARIO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;int tipo;int orden=0;int kind;}

{/*@bgen(jjtree) FuncionUsuario */
            try {
/*@egen*/
            identificador = < IDENTIFIER >
                    {              
                    //verificamos que exista
                    verificarSubprograma(identificador);
                    }

            < LPAREN >
                   //IdentificadorOExpresion(nombre,orden++)
                [   (LOOKAHEAD(Identificador()(< COMMA >|< RPAREN >))
                                     tipo=Identificador()
                                    {
                                      kind=OUTPUT;
                                      jjtn000.addNombreParametrosReales(token.image);
                                    }
                            |tipo=Expresion()
                                            {
                                              kind=INPUT;
                                              jjtn000.addNombreParametrosReales(null);
                                            }
                    ){verificarParametroSubprograma(identificador,tipo,kind,orden++);}
                    (< COMMA > 
                        (LOOKAHEAD(Identificador()(< COMMA >|< RPAREN >))
                                     tipo=Identificador()
                                    {
                                      kind=OUTPUT;
                                      jjtn000.addNombreParametrosReales(token.image);
                                    }
                            |tipo=Expresion()
                                            {
                                              kind=INPUT;
                                              jjtn000.addNombreParametrosReales(null);
                                            }
                        ){verificarParametroSubprograma(identificador,tipo,kind,orden++);} 
                    )*
                ]
            < RPAREN >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
            }
/*@egen*/
            {
              //como los parametros son opcionales en la definicion es necesario reconocer la cantidad
              verificarCantidadParametrosSubprograma(identificador, orden);

              //nombre del procedimiento
              jjtn000.setNombre(identificador.image);       

              return obtenerTipoFuncion(identificador);
            }/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/
 
}


//***************//
int Expresion()           :
{/*@bgen(jjtree) Expresion */
 ASTExpresion jjtn000 = new ASTExpresion(JJTEXPRESION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;
 int tipoRela;
 int operador;}
{/*@bgen(jjtree) Expresion */
 try {
/*@egen*/
 (
    tipo=ExpresionSimple()
    [ operador=OperadorRelacional()/*@bgen(jjtree) #OperacionRel( 3) */
                                    {
                                      ASTOperacionRel jjtn001 = new ASTOperacionRel(JJTOPERACIONREL);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                      jjtn001.jjtSetFirstToken(getToken(1));
                                    }
                                    try {
/*@egen*/ tipoRela=ExpresionSimple()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  3);
                                        jjtn001.jjtSetLastToken(getToken(0));
                                      }
                                    }
/*@egen*/                 
      {
        verificarTipos(token,tipo,tipoRela,operador);
        tipo=BOOLEAN;
      }
    ]
 )/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/
 {return tipo;}/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/ 
}

//*********************//
int ExpresionSimple()     :
{int tipo;
 int tipoSum;
 int operador;}
{
  (
      ( tipo=SignoTermino() |tipo=Termino())
      ( operador=OperadorAditivo()/*@bgen(jjtree) #OperacionSum( 3) */
                                   {
                                     ASTOperacionSum jjtn001 = new ASTOperacionSum(JJTOPERACIONSUM);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                     jjtn001.jjtSetFirstToken(getToken(1));
                                   }
                                   try {
/*@egen*/ tipoSum=Termino()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte001;
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       throw (ParseException)jjte001;
                                     }
                                     throw (Error)jjte001;
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  3);
                                       jjtn001.jjtSetLastToken(getToken(0));
                                     }
                                   }
/*@egen*/                 {verificarTipos(token,tipo,tipoSum,operador);})*
  ){return tipo;}
}

//*************//
int Termino()      :
{int tipo;
 int tipoMult;
 int operador;}
{
  tipo=Factor()
  (operador=OperadorMultiplicativo()/*@bgen(jjtree) #OperacionMul( 3) */
                                     {
                                       ASTOperacionMul jjtn001 = new ASTOperacionMul(JJTOPERACIONMUL);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtn001.jjtSetFirstToken(getToken(1));
                                     }
                                     try {
/*@egen*/ tipoMult=Factor()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  3);
                                         jjtn001.jjtSetLastToken(getToken(0));
                                       }
                                     }
/*@egen*/                {verificarTipos(token,tipo,tipoMult,operador);})*
  {return tipo;}
}

//******************//
int Factor()      :
{int tipo;}
{
	(
        (LOOKAHEAD(2)
           tipo=FuncionUsuario()
        |
           tipo=Identificador())
 	| tipo=Constante()
	| tipo=VariablePrimitiva()
	| tipo=FuncionPrimitiva()  //por ej. --> n := aleatorio(10)
        | < LPAREN > tipo=Expresion() < RPAREN >
	|( < NOT >/*@bgen(jjtree) OperacionNeg */
                   {
                     ASTOperacionNeg jjtn001 = new ASTOperacionNeg(JJTOPERACIONNEG);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                     jjtn001.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/ tipo=Factor()/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                       jjtn001.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/               )
	)
	{return tipo;}
}
//*****************************//

int FuncionPrimitiva()      :
{int tipo;}
{
  (
    tipo=Aleatorio()
  | tipo=Longitud()
  | tipo=Sustraer() 
  | tipo=NumeroATexto()
  | tipo=TextoANumero()
  | tipo=LogicoATexto()
  | tipo=HayRobot()
  | tipo=Minuscula()
  | tipo=Mayuscula()
  | tipo=Cortar()
  | tipo=Reemplazar()
  | tipo=Comienzacon()
  | tipo=Terminacon()
  | tipo=Indicede()
  | tipo=Raiz()
  | tipo=Potencia()
  | tipo=MayorValor()
  | tipo=Seno()
  | tipo=Coseno()
  | tipo=Tangente()
  | tipo=Logaritmo()
  | tipo=LetraAleatoria()
  )
  {return tipo;}
}

//*****************************//
int Aleatorio()                  :
{/*@bgen(jjtree) FunPri_Aleatorio */
 ASTFunPri_Aleatorio jjtn000 = new ASTFunPri_Aleatorio(JJTFUNPRI_ALEATORIO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Aleatorio */
        try {
/*@egen*/
	< RANDOM >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//*****************************//
int Minuscula()                  :
{/*@bgen(jjtree) FunPri_Minuscula */
 ASTFunPri_Minuscula jjtn000 = new ASTFunPri_Minuscula(JJTFUNPRI_MINUSCULA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Minuscula */
        try {
/*@egen*/
	< LOWERCASE >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return STRING;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//*****************************//
int Mayuscula()                  :
{/*@bgen(jjtree) FunPri_Mayuscula */
 ASTFunPri_Mayuscula jjtn000 = new ASTFunPri_Mayuscula(JJTFUNPRI_MAYUSCULA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Mayuscula */
        try {
/*@egen*/
	< UPPERCASE >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return STRING;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//*****************************//
int Cortar()               :
{/*@bgen(jjtree) FunPri_Cortar */
 ASTFunPri_Cortar jjtn000 = new ASTFunPri_Cortar(JJTFUNPRI_CORTAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Cortar */
        try {
/*@egen*/
	< TRIM >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return STRING;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//*****************************//
int Reemplazar()                   :
{/*@bgen(jjtree) FunPri_Reemplazar */
 ASTFunPri_Reemplazar jjtn000 = new ASTFunPri_Reemplazar(JJTFUNPRI_REEMPLAZAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Reemplazar */
        try {
/*@egen*/
	< REPLACE >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
 			< COMMA >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
 			< COMMA >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return STRING;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//*****************************//
int Comienzacon()                    :
{/*@bgen(jjtree) FunPri_Comienzacon */
 ASTFunPri_Comienzacon jjtn000 = new ASTFunPri_Comienzacon(JJTFUNPRI_COMIENZACON);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Comienzacon */
        try {
/*@egen*/
	< STARTSWITH >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
 			< COMMA >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return BOOLEAN;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//*****************************//
int Terminacon()                   :
{/*@bgen(jjtree) FunPri_Terminacon */
 ASTFunPri_Terminacon jjtn000 = new ASTFunPri_Terminacon(JJTFUNPRI_TERMINACON);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Terminacon */
        try {
/*@egen*/
	< ENDSWITH >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
 			< COMMA >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return BOOLEAN;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//*****************************//
int Indicede()                 :
{/*@bgen(jjtree) FunPri_Indicede */
 ASTFunPri_Indicede jjtn000 = new ASTFunPri_Indicede(JJTFUNPRI_INDICEDE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Indicede */
        try {
/*@egen*/
	< INDEXOF >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
 			< COMMA >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

int Raiz()             :
{/*@bgen(jjtree) FunPri_Raiz */
 ASTFunPri_Raiz jjtn000 = new ASTFunPri_Raiz(JJTFUNPRI_RAIZ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Raiz */
        try {
/*@egen*/
	< SQRT >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

int Potencia()                 :
{/*@bgen(jjtree) FunPri_Potencia */
 ASTFunPri_Potencia jjtn000 = new ASTFunPri_Potencia(JJTFUNPRI_POTENCIA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Potencia */
        try {
/*@egen*/
	< POW >
                < LPAREN > 
                    tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
                    < COMMA >
                    tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
                <RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

int MayorValor()                   :
{/*@bgen(jjtree) FunPri_MayorValor */
 ASTFunPri_MayorValor jjtn000 = new ASTFunPri_MayorValor(JJTFUNPRI_MAYORVALOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_MayorValor */
        try {
/*@egen*/
	< MAX >
                < LPAREN > 
                    tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
                    < COMMA >
                    tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
                <RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

int Seno()             :
{/*@bgen(jjtree) FunPri_Seno */
 ASTFunPri_Seno jjtn000 = new ASTFunPri_Seno(JJTFUNPRI_SENO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Seno */
        try {
/*@egen*/
	< SIN >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

int Coseno()               :
{/*@bgen(jjtree) FunPri_Coseno */
 ASTFunPri_Coseno jjtn000 = new ASTFunPri_Coseno(JJTFUNPRI_COSENO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Coseno */
        try {
/*@egen*/
	< COS >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

int Tangente()                 :
{/*@bgen(jjtree) FunPri_Tangente */
 ASTFunPri_Tangente jjtn000 = new ASTFunPri_Tangente(JJTFUNPRI_TANGENTE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Tangente */
        try {
/*@egen*/
	< TAN >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

int Logaritmo()                  :
{/*@bgen(jjtree) FunPri_Logaritmo */
 ASTFunPri_Logaritmo jjtn000 = new ASTFunPri_Logaritmo(JJTFUNPRI_LOGARITMO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Logaritmo */
        try {
/*@egen*/
	< LOG >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

int LetraAleatoria()                       :
{/*@bgen(jjtree) FunPri_LetraAleatoria */
 ASTFunPri_LetraAleatoria jjtn000 = new ASTFunPri_LetraAleatoria(JJTFUNPRI_LETRAALEATORIA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_LetraAleatoria */
        try {
/*@egen*/
	< RANDOMLET >
		< LPAREN >
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return STRING;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}


//*****************************//
int Longitud()                 :
{/*@bgen(jjtree) FunPri_Longitud */
 ASTFunPri_Longitud jjtn000 = new ASTFunPri_Longitud(JJTFUNPRI_LONGITUD);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Longitud */
        try {
/*@egen*/
	< LENGTH >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//*****************************//
int Sustraer()                 :
{/*@bgen(jjtree) FunPri_Sustraer */
 ASTFunPri_Sustraer jjtn000 = new ASTFunPri_Sustraer(JJTFUNPRI_SUSTRAER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_Sustraer */
        try {
/*@egen*/
	< SUBSTRING >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
 			< COMMA >
 			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
 			< COMMA >
 			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return STRING;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//************************************//
int NumeroATexto()                     :
{/*@bgen(jjtree) FunPri_NumeroATexto */
 ASTFunPri_NumeroATexto jjtn000 = new ASTFunPri_NumeroATexto(JJTFUNPRI_NUMEROATEXTO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_NumeroATexto */
        try {
/*@egen*/
	< NUMBERTOTEXT >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return STRING;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//************************************//
int TextoANumero()                     :
{/*@bgen(jjtree) FunPri_TextoANumero */
 ASTFunPri_TextoANumero jjtn000 = new ASTFunPri_TextoANumero(JJTFUNPRI_TEXTOANUMERO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_TextoANumero */
        try {
/*@egen*/
	< TEXTTONUMBER >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,STRING);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return INTEGER;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//************************************//
int LogicoATexto()                     :
{/*@bgen(jjtree) FunPri_LogicoATexto */
 ASTFunPri_LogicoATexto jjtn000 = new ASTFunPri_LogicoATexto(JJTFUNPRI_LOGICOATEXTO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_LogicoATexto */
        try {
/*@egen*/
	< LOGICTOTEXT >
		< LPAREN >
 			tipo=Expresion() {verificarTipos(token,tipo,BOOLEAN);}
		< RPAREN >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return STRING;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//************************************//
int HayRobot()                 :
{/*@bgen(jjtree) FunPri_HayRobot */
 ASTFunPri_HayRobot jjtn000 = new ASTFunPri_HayRobot(JJTFUNPRI_HAYROBOT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) FunPri_HayRobot */
        try {
/*@egen*/
	< HAYROBOT >
		[< LPAREN >
			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
 			< COMMA >
 			tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
 		< RPAREN >]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{ return BOOLEAN;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//***********************//
int VariablePrimitiva()              :
{/*@bgen(jjtree) Pri_Variable */
 ASTPri_Variable jjtn000 = new ASTPri_Variable(JJTPRI_VARIABLE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) Pri_Variable */
 try {
/*@egen*/
 (
	  < POSAV >			{tipo=INTEGER;}
	| < POSCA >			{tipo=INTEGER;}
	| < HAYFLORENLAESQUINA >	{tipo=BOOLEAN;}
	| < HAYFLORENLABOLSA >		{tipo=BOOLEAN;}
	| < HAYPAPELENLAESQUINA >	{tipo=BOOLEAN;}
	| < HAYPAPELENLABOLSA > 	{tipo=BOOLEAN;}
	| < HAYOBSTACULO > 		{tipo=BOOLEAN;}
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    jjtn000.nombre=token.image;
   	return tipo;
  }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

//*********************//
int OperadorAditivo():{/*@bgen(jjtree) OperadorAditivo */
  ASTOperadorAditivo jjtn000 = new ASTOperadorAditivo(JJTOPERADORADITIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) OperadorAditivo */
  try {
/*@egen*/
  (
      < PLUS > 
	| < MINUS >
	| < OR >   
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    jjtn000.operador = token.image;
    return token.kind;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//****************************//
int OperadorMultiplicativo():{/*@bgen(jjtree) OperadorMultiplicativo */
  ASTOperadorMultiplicativo jjtn000 = new ASTOperadorMultiplicativo(JJTOPERADORMULTIPLICATIVO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) OperadorMultiplicativo */
  try {
/*@egen*/
  (
      < PROD >  
	| < DIV >  
	| < AND >
	| < MOD >
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
   	jjtn000.operador = token.image;
	return token.kind;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//************************//
int OperadorRelacional():{/*@bgen(jjtree) OperadorRelacional */
  ASTOperadorRelacional jjtn000 = new ASTOperadorRelacional(JJTOPERADORRELACIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) OperadorRelacional */
  try {
/*@egen*/
  (
      < EQ > 
	| < LE > 
	| < GT > 
	| < LT > 
	| < GE > 
	| < NE > 
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    jjtn000.operador = token.image;
    return token.kind;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//***********//
int SignoTermino()              :
{/*@bgen(jjtree) SignoTermino */
 ASTSignoTermino jjtn000 = new ASTSignoTermino(JJTSIGNOTERMINO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;
int tipo;}
{/*@bgen(jjtree) SignoTermino */
 try {
/*@egen*/
 (
   (t=< PLUS >|t=< MINUS >)
 tipo=Termino()
 )/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
 }
/*@egen*/
 {
   jjtn000.signo = t.image;
   return tipo;
 }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}



//***************//
int Constante()      :
{Token t;}
{/*@bgen(jjtree) ConstanteInt */
  {
    ASTConstanteInt jjtn001 = new ASTConstanteInt(JJTCONSTANTEINT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  (
    t=< INTEGER_LITERAL >/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001, true);
                           jjtc001 = false;
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
/*@egen*/{jjtn001.valor= Integer.parseInt(t.image);return INTEGER;}
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/             
|/*@bgen(jjtree) ConstanteStr */
  {
    ASTConstanteStr jjtn002 = new ASTConstanteStr(JJTCONSTANTESTR);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtn002.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ (
    t=< STRING_LITERAL >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn002, true);
                          jjtc002 = false;
                          jjtn002.jjtSetLastToken(getToken(0));
                        }
/*@egen*/{jjtn002.valor= t.image;return STRING;}
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtn002.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/             
|/*@bgen(jjtree) ConstanteBoolTrue */
  {
    ASTConstanteBoolTrue jjtn003 = new ASTConstanteBoolTrue(JJTCONSTANTEBOOLTRUE);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtn003.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ (
    t= < TRUE >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn003, true);
                  jjtc003 = false;
                  jjtn003.jjtSetLastToken(getToken(0));
                }
/*@egen*/ {return BOOLEAN;}
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
      jjtn003.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                  
|/*@bgen(jjtree) ConstanteBoolFalse */
  {
    ASTConstanteBoolFalse jjtn004 = new ASTConstanteBoolFalse(JJTCONSTANTEBOOLFALSE);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtn004.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ (
    t= < FALSE >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn004, true);
                   jjtc004 = false;
                   jjtn004.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {return BOOLEAN;}
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtn004.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                   
  
}

//************************//
void SentenciaCompuesta()      :{}
{
  Seleccion()
| IteracionCondicional()
| IteracionIncondicional()  
}

//***************//
void Seleccion():
{/*@bgen(jjtree) Seleccion */
 ASTSeleccion jjtn000 = new ASTSeleccion(JJTSELECCION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) Seleccion */
  try {
/*@egen*/  
  < IF >  tipo=Expresion(){verificarTipos(token,tipo,BOOLEAN);}
    ( Bloque() )
  [ LOOKAHEAD(1) < ELSE >
  	( Bloque() )
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Bloque():{/*@bgen(jjtree) Bloque */
  ASTBloque jjtn000 = new ASTBloque(JJTBLOQUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Bloque */
  try {
/*@egen*/
  ( Sentencia()| Cuerpo() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
//**************************//
void IteracionCondicional():
{/*@bgen(jjtree) IteracionCondicional */
 ASTIteracionCondicional jjtn000 = new ASTIteracionCondicional(JJTITERACIONCONDICIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) IteracionCondicional */
  try {
/*@egen*/
  < WHILE > tipo=Expresion(){verificarTipos(token,tipo,BOOLEAN);}
    ( Bloque() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//****************************//
void IteracionIncondicional():
{/*@bgen(jjtree) IteracionIncondicional */
 ASTIteracionIncondicional jjtn000 = new ASTIteracionIncondicional(JJTITERACIONINCONDICIONAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) IteracionIncondicional */
  try {
/*@egen*/
  < REPEAT >  tipo=Expresion(){verificarTipos(token,tipo,INTEGER);} 
    ( Bloque() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//****************//
void Invocacion()      :{}
{
 (LOOKAHEAD(2)
   ProcedimientoUsuarioHilo()
 | ProcedimientoUsuario() 
 | ProcedimientoPrimitivo())
}

//------------------ algo similar deberia crearse el llamado a una funcion
void ProcedimientoUsuario():
{/*@bgen(jjtree) ProcedimientoUsuario */
 ASTProcedimientoUsuario jjtn000 = new ASTProcedimientoUsuario(JJTPROCEDIMIENTOUSUARIO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;String nombre;int tipo;int orden=0;int kind;}
{/*@bgen(jjtree) ProcedimientoUsuario */
        try {
/*@egen*/
	identificador = < IDENTIFIER >
		{
		  verificarSubprograma(identificador);
		}
    
    [ < LPAREN >
               //IdentificadorOExpresion(nombre,orden++)
               (LOOKAHEAD(Identificador()(< COMMA >|< RPAREN >))
	 			 tipo=Identificador()
        			{
        			  kind=OUTPUT;
        			  jjtn000.addNombreParametrosReales(token.image);
        			}
    			|tipo=Expresion()
	  				{
	  				  kind=INPUT;
	  				  jjtn000.addNombreParametrosReales(null);
	  				}
    		   ){verificarParametroSubprograma(identificador,tipo,kind,orden++);}
    		   
               
    (< COMMA > (LOOKAHEAD(Identificador()(< COMMA >|< RPAREN >))
	 			 tipo=Identificador()
        			{
        			  kind=OUTPUT;
        			  jjtn000.addNombreParametrosReales(token.image);
        			}
    			|tipo=Expresion()
	  				{
	  				  kind=INPUT;
	  				  jjtn000.addNombreParametrosReales(null);
	  				}
    		   ){verificarParametroSubprograma(identificador,tipo,kind,orden++);} )*

    <RPAREN >]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
	  //como los parametros son opcionales en la definicion es necesario reconocer la cantidad
	  verificarCantidadParametrosSubprograma(identificador, orden);

          //nombre del procedimiento
          jjtn000.nombre=identificador.image;
      
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}
//******************//
void ProcedimientoUsuarioHilo():
{/*@bgen(jjtree) ProcedimientoUsuarioHilo */
 ASTProcedimientoUsuarioHilo jjtn000 = new ASTProcedimientoUsuarioHilo(JJTPROCEDIMIENTOUSUARIOHILO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token identificador;String nombre;int tipo;int orden=0;}
{/*@bgen(jjtree) ProcedimientoUsuarioHilo */
        try {
/*@egen*/
  	
	<THREAD_START> identificador= < IDENTIFIER > 
		{
		  //nombre=t.image;
		  verificarHilo(identificador);
		}

    
    [ < LPAREN >
               tipo=Expresion()
	  			{
	  			 // jjtThis.add(null);
    		      verificarParametroHilo(identificador,tipo,orden++);
    		    }
               
    (
      < COMMA > tipo=Expresion()
	  			{
	  			  //jjtThis.add(null);
    		   	  verificarParametroHilo(identificador,tipo,orden++);
    		   	  }
    )*

    <RPAREN >]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
   
    {
	  //como los parametros son opcionales en la definicion es necesario reconocer la cantidad
	  verificarCantidadParametrosHilo(identificador, orden);
      //nombre del hilo/robot
      jjtn000.nombre=identificador.image;
      
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//**********************//
void ProcedimientoPrimitivo()      :{}
{
  Informar()
| Pos()
| Leer()
//Manejo de Semaforos
| IniciarSemaforo()
| Senal()
| Esperar()
}

//***************//
void Informar():{/*@bgen(jjtree) Informar */
  ASTInformar jjtn000 = new ASTInformar(JJTINFORMAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Informar */
  try {
/*@egen*/
  <MESSAGE> < LPAREN > Expresion() (< COMMA > Expresion())* <RPAREN >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//**********//
void Leer():
{/*@bgen(jjtree) Leer */
 ASTLeer jjtn000 = new ASTLeer(JJTLEER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) Leer */
  try {
/*@egen*/
  < READ >
  < LPAREN >
    tipo=Identificador() {verificarTipos(token,tipo,tipo,EQ);}
  < RPAREN >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//*****************//
void Pos()         :
{/*@bgen(jjtree) Pri_Pos */
 ASTPri_Pos jjtn000 = new ASTPri_Pos(JJTPRI_POS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) Pri_Pos */
 try {
/*@egen*/
 < POSITION >
 	< LPAREN >
 		tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
 		< COMMA >
 		tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}
 	<RPAREN >/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/
}

//****************************************//
void IniciarSemaforo()                     :
{/*@bgen(jjtree) Pri_IniciarSemaforo */
 ASTPri_IniciarSemaforo jjtn000 = new ASTPri_IniciarSemaforo(JJTPRI_INICIARSEMAFORO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) Pri_IniciarSemaforo */
        try {
/*@egen*/
	< SEMAPHORE_INIT >
	< LPAREN >
		tipo=Identificador() {verificarTipos(token,tipo,SEMAPHORE);}
		[< COMMA > tipo=Expresion() {verificarTipos(token,tipo,INTEGER);}]
	< RPAREN >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}



//*********************//
void Senal()        :
{/*@bgen(jjtree) Pri_PS */
 ASTPri_PS jjtn000 = new ASTPri_PS(JJTPRI_PS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) Pri_PS */
        try {
/*@egen*/
	< SIGNAL >
	< LPAREN >
		tipo=Identificador() {verificarTipos(token,tipo,SEMAPHORE);}
	< RPAREN >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

//*********************//
void Esperar()        :
{/*@bgen(jjtree) Pri_PE */
 ASTPri_PE jjtn000 = new ASTPri_PE(JJTPRI_PE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/int tipo;}
{/*@bgen(jjtree) Pri_PE */
        try {
/*@egen*/
	< WAIT >
	< LPAREN >
		tipo=Identificador() {verificarTipos(token,tipo,SEMAPHORE);}
	< RPAREN >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

