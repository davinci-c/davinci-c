/* The following code was generated by JFlex 1.4.1 on 26/03/18 21:19 */

/*
 * 12/06/2012
 *
 * DaVinciConcurrenteTokenMaker.java - Scanner for the DaVinci-Concurrent programming language.
 * 
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
*
* Escaner reconocedor de gramaticas DaVinci Concurrente
**/

public class DaVinciConcurrenteTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\22\1\11\1\0\1\22\1\20\22\0\1\22\1\52\1\16"+
    "\1\21\1\60\1\52\1\52\1\10\1\34\1\34\1\52\1\52\1\50"+
    "\1\52\1\66\1\25\1\4\1\5\2\17\4\7\2\3\1\51\1\50"+
    "\1\53\1\54\1\55\1\57\1\21\1\44\1\27\1\35\1\6\1\40"+
    "\1\33\1\67\1\61\1\47\2\1\1\26\1\37\1\41\1\36\1\63"+
    "\1\71\1\45\1\64\1\62\1\13\1\32\1\65\1\31\1\70\1\43"+
    "\1\57\1\12\1\57\1\20\1\2\1\0\1\44\1\30\1\35\1\6"+
    "\1\40\1\15\1\67\1\72\1\47\2\1\1\26\1\37\1\42\1\36"+
    "\1\63\1\71\1\46\1\64\1\14\1\13\1\32\1\73\1\31\1\70"+
    "\1\43\1\23\1\56\1\24\1\57\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\2\1\4\1\5\1\2"+
    "\1\6\1\7\1\1\1\10\1\11\1\12\1\2\1\6"+
    "\1\13\10\2\3\12\3\2\1\14\1\15\1\14\1\16"+
    "\6\14\1\17\6\14\2\1\1\3\1\1\1\20\2\1"+
    "\1\2\1\21\5\2\4\7\1\22\1\23\7\2\2\24"+
    "\16\2\1\24\2\0\4\14\4\0\4\14\2\0\1\1"+
    "\1\20\1\3\1\20\7\2\2\7\1\25\1\22\4\7"+
    "\32\2\1\26\7\2\2\0\4\14\4\0\4\14\2\0"+
    "\3\1\7\2\1\27\2\7\24\2\1\30\6\2\1\24"+
    "\11\2\1\0\3\14\1\31\2\0\3\14\1\32\1\0"+
    "\1\1\3\2\1\33\3\2\2\7\7\2\1\26\24\2"+
    "\1\0\1\14\2\0\1\14\1\0\1\1\6\2\2\7"+
    "\2\2\1\33\33\2\1\7\12\2\1\26\76\2\1\33"+
    "\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u021c\0\u030c\0\u021c"+
    "\0\u0348\0\u0384\0\u03c0\0\u021c\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u021c\0\u05a0\0\u021c\0\u05dc\0\u0618"+
    "\0\u0654\0\u0690\0\u06cc\0\u021c\0\u0708\0\u021c\0\u0744\0\u0780"+
    "\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u021c\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\264\0\u0a8c\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u021c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u021c\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\360\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\264\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u021c\0\u021c\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u1770\0\u26e8\0\u2724"+
    "\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u021c\0\u28c8"+
    "\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8"+
    "\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88"+
    "\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\360\0\u2df0\0\u2e2c"+
    "\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c"+
    "\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec"+
    "\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc"+
    "\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac"+
    "\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c"+
    "\0\u37c8\0\u3804\0\u3840\0\360\0\u387c\0\u38b8\0\u38f4\0\u3930"+
    "\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10"+
    "\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0"+
    "\0\u3d2c\0\u3d68\0\u32a0\0\u3da4\0\u3de0\0\u3408\0\u3e1c\0\u3e58"+
    "\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038"+
    "\0\u4074\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218"+
    "\0\u4254\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8"+
    "\0\u4434\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8"+
    "\0\u4614\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8"+
    "\0\u47f4\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u2f58\0\u4920\0\u495c"+
    "\0\u4998\0\u49d4\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c"+
    "\0\u4b78\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c"+
    "\0\u4d58\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc"+
    "\0\u4f38\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u50a0\0\u50dc"+
    "\0\u5118\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc"+
    "\0\u52f8\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c"+
    "\0\u54d8\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c"+
    "\0\u56b8\0\u56f4\0\u5730\0\u576c\0\u57a8\0\u57e4\0\u5820\0\360"+
    "\0\u585c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\6\1\10\1\6\1\11"+
    "\1\12\1\4\1\5\1\13\1\14\1\15\1\6\1\16"+
    "\1\4\1\17\1\20\1\16\1\21\1\22\3\5\1\23"+
    "\1\14\1\24\1\25\1\5\1\26\1\27\2\30\1\5"+
    "\1\31\2\32\1\33\1\34\1\35\1\36\1\37\1\36"+
    "\1\35\1\36\1\16\1\4\1\40\1\13\1\41\1\42"+
    "\1\5\1\16\3\5\1\40\1\5\11\43\1\44\3\43"+
    "\1\45\6\43\1\46\6\43\1\47\25\43\1\50\3\43"+
    "\1\51\4\43\1\52\1\53\11\54\1\55\3\54\1\56"+
    "\15\54\1\57\25\54\1\60\3\54\1\61\4\54\1\62"+
    "\1\63\10\4\2\0\4\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\0\13\4\10\0\6\4\1\0\6\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\5\5\2\4\1\65\3\6\1\4\1\6\2\0\4\4"+
    "\1\0\1\6\1\0\1\4\4\0\1\66\5\4\1\0"+
    "\13\4\10\0\6\4\1\0\7\4\1\67\1\4\2\70"+
    "\1\4\1\70\2\0\4\4\1\0\1\70\1\0\1\4"+
    "\4\0\1\66\2\71\1\72\2\4\1\0\13\4\10\0"+
    "\6\4\1\0\6\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\3\5\1\73"+
    "\7\5\10\0\1\4\5\5\1\0\5\5\10\11\1\74"+
    "\1\0\62\11\74\0\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\1\5"+
    "\1\75\1\5\1\76\3\5\1\77\3\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\1\100"+
    "\2\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\12\5\1\101\10\0\1\4\5\5\1\0\5\5\10\102"+
    "\1\103\1\104\1\105\3\102\1\106\55\102\22\0\1\17"+
    "\76\0\1\107\46\0\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\1\5"+
    "\1\110\1\5\1\111\7\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\7\5\1\112\3\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\1\5\1\113\11\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\1\5\1\114\5\5"+
    "\1\115\2\5\1\116\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\4\5\2\117\5\5\10\0"+
    "\1\4\3\5\1\120\1\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\1\121\2\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\1\122\3\5\1\123\1\5\1\0"+
    "\10\5\2\124\1\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\3\5\1\125\3\5\1\126"+
    "\3\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\4\5\2\127\5\5\10\0\1\4\5\5"+
    "\1\0\5\5\54\0\1\36\73\0\2\36\16\0\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\7\5\1\130\2\5\1\131\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\1\5\1\132\1\5\1\133\4\5\2\134\1\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\1\135\2\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\3\5\1\136\3\5\1\117\2\5\1\137\10\0"+
    "\1\4\5\5\1\0\5\5\11\43\1\0\3\43\1\0"+
    "\6\43\1\0\45\43\16\0\1\140\32\0\1\141\12\0"+
    "\1\140\11\0\11\43\1\0\2\43\1\142\1\0\6\43"+
    "\1\0\22\43\1\143\12\43\1\142\7\43\2\0\11\43"+
    "\1\0\2\43\1\144\1\0\6\43\1\0\35\43\1\144"+
    "\7\43\2\0\11\43\1\0\3\43\1\0\6\43\1\0"+
    "\40\43\1\145\4\43\1\0\1\146\14\0\1\147\45\0"+
    "\1\147\76\0\1\146\5\0\1\146\11\54\1\0\3\54"+
    "\1\0\54\54\16\0\1\150\32\0\1\151\12\0\1\150"+
    "\11\0\11\54\1\0\2\54\1\152\1\0\31\54\1\153"+
    "\12\54\1\152\7\54\2\0\11\54\1\0\2\54\1\154"+
    "\1\0\44\54\1\154\7\54\2\0\11\54\1\0\3\54"+
    "\1\0\47\54\1\155\4\54\1\0\1\156\14\0\1\157"+
    "\45\0\1\157\76\0\1\156\5\0\1\156\10\4\2\0"+
    "\1\4\1\160\2\4\1\0\1\4\1\0\1\4\4\0"+
    "\6\4\1\0\13\4\10\0\6\4\1\0\7\4\1\65"+
    "\3\6\1\4\1\6\2\0\4\4\1\0\1\6\1\0"+
    "\1\4\4\0\6\4\1\0\13\4\10\0\6\4\1\0"+
    "\7\4\1\67\1\4\2\70\1\4\1\70\2\0\4\4"+
    "\1\0\1\70\1\0\1\4\4\0\6\4\1\0\13\4"+
    "\10\0\6\4\1\0\7\4\1\67\1\4\2\70\1\4"+
    "\1\70\2\0\4\4\1\0\1\70\1\0\1\4\4\0"+
    "\1\161\5\4\1\0\13\4\10\0\6\4\1\0\11\4"+
    "\2\162\2\4\2\0\4\4\1\0\1\4\1\0\1\4"+
    "\4\0\6\4\1\0\13\4\10\0\6\4\1\0\10\4"+
    "\5\163\2\0\3\4\1\163\1\0\1\163\1\0\1\4"+
    "\4\0\1\4\2\163\2\4\1\163\1\0\1\163\2\4"+
    "\1\163\3\4\1\163\3\4\10\0\6\4\1\0\6\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\10\5\2\164\1\5\10\0\1\4"+
    "\2\5\1\165\2\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\2\5\1\166\10\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\3\5\1\167\2\5\1\0\10\5"+
    "\2\170\1\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\4\5\2\171\5\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\4\5"+
    "\2\172\5\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\4\5\2\117\5\5\10\0\1\4"+
    "\5\5\1\0\5\5\11\103\1\173\1\174\3\103\1\175"+
    "\66\103\1\173\1\174\3\103\1\176\55\103\12\173\1\177"+
    "\3\173\1\175\61\173\2\200\1\173\1\201\1\102\1\0"+
    "\1\102\1\202\3\102\1\200\10\173\1\102\11\173\1\102"+
    "\3\173\1\102\25\173\16\0\1\175\55\0\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\4\5\2\203\5\5\10\0\1\4\5\5"+
    "\1\0\1\204\4\5\1\4\7\5\2\0\1\64\1\5"+
    "\1\205\1\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\13\5\10\0\1\4\1\5\1\205\3\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\10\5\2\206\1\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\2\5\1\207\5\5\2\210\1\5\10\0\1\4"+
    "\3\5\1\211\1\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\4\5"+
    "\1\212\1\5\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\13\5\10\0\1\4"+
    "\5\5\1\0\1\5\1\213\3\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\3\5\1\214\2\215\5\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\13\5\10\0"+
    "\1\4\2\5\1\216\2\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\2\5\1\217\10\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\3\5\1\220"+
    "\7\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\12\5\1\221\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\10\5\2\222\1\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\1\5\1\223\1\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\3\5\1\224\7\5\10\0\1\4"+
    "\1\5\1\223\1\225\2\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\12\5\1\226\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\5\5\1\227\1\5\2\0\1\64\2\5"+
    "\1\230\1\0\1\5\1\0\1\4\4\0\5\5\1\230"+
    "\1\0\12\5\1\231\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\13\5\10\0\1\4\5\5"+
    "\1\0\1\5\1\232\3\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\1\233\5\5"+
    "\1\0\13\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\1\5\1\234\1\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\13\5\10\0\1\4"+
    "\1\5\1\234\1\5\1\235\1\5\1\0\5\5\1\4"+
    "\5\5\1\236\1\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\13\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\1\5"+
    "\1\237\11\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\1\5\2\240\3\5\1\0\13\5\10\0\1\4"+
    "\3\5\1\241\1\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\2\5\1\242\1\5\2\243\5\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\4\5"+
    "\2\244\5\5\10\0\1\4\5\5\1\0\5\5\63\0"+
    "\1\245\36\0\1\246\45\0\11\43\1\0\3\43\1\0"+
    "\6\43\1\0\36\43\1\247\6\43\2\0\11\43\1\0"+
    "\3\43\1\0\6\43\1\0\1\43\1\250\43\43\2\0"+
    "\11\43\1\0\2\43\1\251\1\0\6\43\1\0\35\43"+
    "\1\251\7\43\2\0\11\43\1\0\3\43\1\0\6\43"+
    "\1\0\40\43\1\252\4\43\1\0\1\253\65\0\1\253"+
    "\5\0\1\253\14\0\1\254\45\0\1\254\74\0\1\255"+
    "\36\0\1\256\45\0\11\54\1\0\3\54\1\0\45\54"+
    "\1\257\6\54\2\0\11\54\1\0\3\54\1\0\10\54"+
    "\1\260\43\54\2\0\11\54\1\0\2\54\1\261\1\0"+
    "\44\54\1\261\7\54\2\0\11\54\1\0\3\54\1\0"+
    "\47\54\1\262\4\54\1\0\1\263\65\0\1\263\5\0"+
    "\1\263\14\0\1\264\45\0\1\264\11\0\3\4\5\265"+
    "\2\0\3\4\1\265\1\0\1\265\1\0\1\4\4\0"+
    "\1\4\2\265\2\4\1\265\1\0\1\265\2\4\1\265"+
    "\3\4\1\265\3\4\10\0\6\4\1\0\7\4\1\266"+
    "\1\4\2\162\2\4\2\0\4\4\1\0\1\4\1\0"+
    "\1\4\4\0\6\4\1\0\13\4\10\0\6\4\1\0"+
    "\7\4\1\267\5\163\2\0\3\4\1\163\1\0\1\163"+
    "\1\0\1\4\4\0\1\161\2\163\2\4\1\163\1\0"+
    "\1\163\2\4\1\163\3\4\1\163\3\4\10\0\6\4"+
    "\1\0\6\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\3\5\1\270\7\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\1\5\1\271\11\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\7\5\1\272\3\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\1\5\1\273\1\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\13\5\10\0\1\4\1\5\1\273"+
    "\3\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\2\5"+
    "\1\274\10\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\1\275\4\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\1\276\12\5"+
    "\10\0\1\4\5\5\1\0\5\5\12\173\1\177\3\173"+
    "\1\277\61\173\2\103\1\173\2\103\1\0\1\103\1\300"+
    "\4\103\10\173\1\103\11\173\1\103\3\173\1\103\36\173"+
    "\1\0\62\173\4\103\2\201\1\103\1\201\1\103\1\173"+
    "\1\174\3\103\1\175\1\201\60\103\2\102\1\103\1\102"+
    "\1\103\1\173\1\174\3\103\1\175\1\102\54\103\3\173"+
    "\5\301\2\173\1\177\2\173\1\301\1\277\1\301\7\173"+
    "\2\301\2\173\1\301\1\173\1\301\2\173\1\301\3\173"+
    "\1\301\27\173\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\13\5\10\0"+
    "\1\4\5\5\1\0\1\302\4\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\7\5\1\303\2\5\1\304\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\10\5\2\305"+
    "\1\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\12\5\1\306\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\3\5\1\307\6\5"+
    "\1\310\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\1\5\1\311\1\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\13\5\10\0\1\4\1\5"+
    "\1\311\3\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\3\5\1\312\7\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\3\5\1\313\7\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\1\314\2\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\1\5\1\315\11\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\4\5\2\316\5\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\1\314\2\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\13\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\3\5\1\317\7\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\3\5\1\320\7\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\7\5\1\321\3\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\13\5\10\0\1\4\3\5\1\311\1\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\7\5\1\322\3\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\1\5\1\323\11\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\2\5\1\324\10\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\3\5\1\325\7\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\6\5\1\326\4\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\12\5\1\327\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\1\5\1\330\11\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\1\331"+
    "\12\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\2\5\1\332\1\0\1\5\1\0\1\4"+
    "\4\0\5\5\1\332\1\0\1\5\1\333\11\5\10\0"+
    "\1\4\2\5\1\334\2\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\1\5\1\335\11\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\3\5\1\336"+
    "\7\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\1\337\6\5\1\340\3\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\12\5"+
    "\1\341\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\1\342\12\5\10\0\1\4\5\5\1\0"+
    "\1\343\4\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\13\5\10\0"+
    "\1\4\2\5\1\344\2\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\1\5\1\345\1\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\13\5\10\0\1\4\1\5"+
    "\1\345\3\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\7\5\1\346\3\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\1\5\1\326\11\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\1\5\1\117\11\5\10\0\1\4\5\5\1\0\5\5"+
    "\51\0\1\347\62\0\1\245\33\0\11\43\1\0\3\43"+
    "\1\0\6\43\1\0\24\43\1\350\20\43\2\0\11\43"+
    "\1\0\3\43\1\0\6\43\1\0\13\43\1\247\31\43"+
    "\2\0\11\43\1\0\3\43\1\0\6\43\1\0\36\43"+
    "\1\351\6\43\2\0\11\43\1\0\3\43\1\0\6\43"+
    "\1\0\41\43\1\352\3\43\70\0\1\353\70\0\1\354"+
    "\61\0\1\355\62\0\1\255\33\0\11\54\1\0\3\54"+
    "\1\0\33\54\1\356\20\54\2\0\11\54\1\0\3\54"+
    "\1\0\22\54\1\257\31\54\2\0\11\54\1\0\3\54"+
    "\1\0\45\54\1\357\6\54\2\0\11\54\1\0\3\54"+
    "\1\0\50\54\1\360\3\54\70\0\1\361\70\0\1\362"+
    "\10\0\3\4\5\363\2\0\3\4\1\363\1\0\1\363"+
    "\1\0\1\4\4\0\1\4\2\363\2\4\1\363\1\0"+
    "\1\363\2\4\1\363\3\4\1\363\3\4\10\0\6\4"+
    "\1\0\7\4\1\267\5\163\2\0\3\4\1\163\1\0"+
    "\1\163\1\0\1\4\4\0\1\4\2\163\2\4\1\163"+
    "\1\0\1\163\2\4\1\163\3\4\1\163\3\4\10\0"+
    "\6\4\1\0\6\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\1\364\12\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\13\5\10\0\1\4\3\5\1\365\1\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\10\5\2\366\1\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\1\5\1\367\11\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\12\5\1\370\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\3\5\1\371\7\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\12\5\1\372\10\0\1\4"+
    "\5\5\1\0\5\5\3\173\5\373\2\173\1\177\2\173"+
    "\1\373\1\277\1\373\7\173\2\373\2\173\1\373\1\173"+
    "\1\373\2\173\1\373\3\173\1\373\32\173\5\374\2\173"+
    "\1\177\2\173\1\374\1\277\1\374\7\173\2\374\2\173"+
    "\1\374\1\173\1\374\2\173\1\374\3\173\1\374\27\173"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\12\5\1\375\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\10\5"+
    "\2\376\1\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\1\377\12\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\7\5\1\u0100"+
    "\3\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\7\5\1\u0101\3\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\4\5\2\u0102"+
    "\5\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\3\5\1\u0103\7\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\7\5\1\341"+
    "\3\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\4\5\2\243\5\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\10\5\2\u0104"+
    "\1\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\13\5\10\0\1\4\3\5\1\u0105\1\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\10\5\2\u0106"+
    "\1\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\1\5\1\u0107\1\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\13\5\10\0\1\4\1\5"+
    "\1\u0107\3\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\10\5\2\311\1\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\10\5\2\377\1\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\1\5\1\u0108\1\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\13\5\10\0\1\4\1\5\1\u0108\3\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\4\5\2\u0109"+
    "\5\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\10\5\2\u010a\1\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\13\5\10\0"+
    "\1\4\2\5\1\u010b\2\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\1\5\1\u010c\1\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\13\5\10\0\1\4\1\5"+
    "\1\u010c\3\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\1\u010d\12\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\10\5\2\u010e\1\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\12\5"+
    "\1\u010f\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\1\u0110\5\5\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\1\5\2\u0111\3\5\1\0\13\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\7\5\1\u0112\3\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\13\5\10\0\1\4"+
    "\3\5\1\117\1\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\4\5\2\u0113\5\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\7\5\1\u0104\3\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\4\5"+
    "\1\u0104\1\5\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\10\5\2\326\1\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\3\5\1\u0114\7\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\10\5\2\u0115\1\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\10\5\2\u0116\1\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\10\5\2\u0117\1\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\2\5\1\u0118\1\0\1\5\1\0\1\4\4\0"+
    "\5\5\1\u0118\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\5\5\25\0\1\u0119\46\0\11\43\1\0\3\43\1\0"+
    "\6\43\1\0\1\u011a\44\43\2\0\11\43\1\0\3\43"+
    "\1\0\6\43\1\0\24\43\1\350\12\43\1\247\5\43"+
    "\2\0\1\43\10\352\1\0\1\43\2\352\1\353\1\43"+
    "\1\352\1\43\1\352\2\43\1\0\26\352\1\43\1\352"+
    "\2\43\13\352\2\353\1\0\1\353\1\u011b\5\353\1\u011b"+
    "\2\0\3\353\1\0\1\353\1\0\1\u011b\3\0\7\353"+
    "\1\u011b\13\353\3\u011b\1\0\1\u011b\2\0\1\u011b\6\353"+
    "\1\u011b\5\353\51\0\1\347\12\0\1\245\34\0\1\u011c"+
    "\46\0\11\54\1\0\3\54\1\0\7\54\1\u011d\44\54"+
    "\2\0\11\54\1\0\3\54\1\0\33\54\1\356\12\54"+
    "\1\257\5\54\2\0\1\54\10\360\1\0\1\54\2\360"+
    "\1\361\1\54\1\360\1\54\1\360\3\54\26\360\1\54"+
    "\1\360\2\54\13\360\2\361\1\0\1\361\1\u011e\5\361"+
    "\1\u011e\2\0\3\361\1\0\1\361\1\0\1\u011e\3\0"+
    "\7\361\1\u011e\13\361\3\u011e\1\0\1\u011e\2\0\1\u011e"+
    "\6\361\1\u011e\5\361\51\0\1\355\12\0\1\255\7\0"+
    "\3\4\5\u011f\2\0\3\4\1\u011f\1\0\1\u011f\1\0"+
    "\1\4\4\0\1\4\2\u011f\2\4\1\u011f\1\0\1\u011f"+
    "\2\4\1\u011f\3\4\1\u011f\3\4\10\0\6\4\1\0"+
    "\6\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\13\5\10\0\1\4\1\337"+
    "\4\5\1\0\3\5\1\337\1\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\12\5\1\u0120\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\2\5\1\u0121\1\0\1\5"+
    "\1\0\1\4\4\0\5\5\1\u0121\1\0\13\5\10\0"+
    "\1\4\2\5\1\u0122\2\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\7\5\1\u0123\3\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\4\5\2\u0124"+
    "\5\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\4\5\2\u0125\5\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\1\5\1\101"+
    "\11\5\10\0\1\4\5\5\1\0\5\5\3\173\5\u0126"+
    "\2\173\1\177\2\173\1\u0126\1\277\1\u0126\7\173\2\u0126"+
    "\2\173\1\u0126\1\173\1\u0126\2\173\1\u0126\3\173\1\u0126"+
    "\32\173\5\u0127\2\173\1\177\2\173\1\u0127\1\277\1\u0127"+
    "\7\173\2\u0127\2\173\1\u0127\1\173\1\u0127\2\173\1\u0127"+
    "\3\173\1\u0127\27\173\1\4\7\5\2\0\1\64\1\5"+
    "\1\u0128\1\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\13\5\10\0\1\4\1\5\1\u0128\3\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\12\5\1\u0129\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\1\5\1\u012a\11\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\7\5\1\u012b\3\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\1\5\2\u012c"+
    "\3\5\1\0\13\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\6\5\1\u012d\4\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\4\5\2\u012e\5\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\1\u012f\12\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\4\5\1\u0130\1\5"+
    "\1\0\13\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\10\5\2\u0131\1\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\1\5"+
    "\1\u0132\11\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\1\u012d\12\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\4\5\2\u0133"+
    "\5\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\1\u0134\5\5\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\12\5\1\u0135\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\3\5\1\u0136\7\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\2\5\1\311\10\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\7\5\1\u0137\3\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\1\5\1\u0138\11\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\13\5\10\0\1\4\3\5\1\u0139\1\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\13\5\10\0\1\4\2\5"+
    "\1\u013a\2\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\1\u013b\12\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\5\5\1\u013c\1\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\13\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\7\5"+
    "\1\u013d\3\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\1\5\1\u013e\11\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\7\5"+
    "\1\u013f\3\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\1\5\1\u0140\11\5\10\0\1\4"+
    "\5\5\1\0\5\5\25\0\1\353\46\0\11\43\1\0"+
    "\3\43\1\0\6\43\1\0\1\352\44\43\27\0\1\361"+
    "\46\0\11\54\1\0\3\54\1\0\7\54\1\360\44\54"+
    "\2\0\3\4\5\5\2\0\3\4\1\5\1\0\1\5"+
    "\1\0\1\4\4\0\1\4\2\5\2\4\1\5\1\0"+
    "\1\5\2\4\1\5\3\4\1\5\3\4\10\0\6\4"+
    "\1\0\6\4\7\5\2\0\1\64\1\5\1\166\1\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\13\5"+
    "\10\0\1\4\1\5\1\166\3\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\1\u0141\5\5\1\0\13\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\7\5\1\u0142"+
    "\3\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\4\5\2\u0143\5\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\7\5\1\u0144"+
    "\3\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\1\5\1\u0145\1\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\13\5\10\0\1\4\1\5"+
    "\1\u0145\3\5\1\0\5\5\3\173\5\u0146\2\173\1\177"+
    "\2\173\1\u0146\1\277\1\u0146\7\173\2\u0146\2\173\1\u0146"+
    "\1\173\1\u0146\2\173\1\u0146\3\173\1\u0146\32\173\5\102"+
    "\2\173\1\177\2\173\1\102\1\277\1\102\7\173\2\102"+
    "\2\173\1\102\1\173\1\102\2\173\1\102\3\173\1\102"+
    "\27\173\1\4\7\5\2\0\1\64\1\u0147\2\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\13\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\1\5\1\u0148\1\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\13\5\10\0\1\4\1\5\1\u0148\3\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\7\5\1\u0149"+
    "\3\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\1\u014a\5\5\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\1\u014b\5\5\1\0\13\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\7\5\1\u0135\3\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\6\5\1\u0124\4\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\1\u014c\2\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\13\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\7\5\1\u014d\3\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\7\5"+
    "\1\u014e\3\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\10\5\2\u014f\1\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\7\5"+
    "\1\313\3\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\7\5\1\u0150\3\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\10\5"+
    "\2\117\1\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\5\5\1\u0145\1\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\13\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\10\5"+
    "\2\u0151\1\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\10\5\2\u0152\1\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\1\5"+
    "\1\u0153\1\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\13\5\10\0\1\4\1\5\1\u0153\3\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\3\5\1\u0154\7\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\12\5\1\u0155\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\12\5\1\u0156\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\2\5"+
    "\1\u0157\10\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\1\u0158\4\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\3\5\1\341"+
    "\7\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\10\5\2\u0159\1\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\1\5\1\313"+
    "\11\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\13\5\10\0\1\4\2\5\1\u015a\2\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\1\u015b\2\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\13\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\1\u015c\12\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\3\5\1\326\7\5\10\0"+
    "\1\4\5\5\1\0\5\5\3\173\5\103\2\173\1\177"+
    "\2\173\1\103\1\277\1\103\7\173\2\103\2\173\1\103"+
    "\1\173\1\103\2\173\1\103\3\173\1\103\27\173\1\4"+
    "\5\5\1\326\1\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\13\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\2\5"+
    "\1\243\10\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\1\5\1\u015d\1\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\13\5\10\0\1\4"+
    "\1\5\1\u015d\3\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\3\5\1\u015e\7\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\3\5\1\u014e\7\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\1\u0155"+
    "\5\5\1\0\13\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\1\u015f\5\5\1\0\13\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\12\5"+
    "\1\243\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\6\5\1\311\4\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\13\5\10\0"+
    "\1\4\3\5\1\u0160\1\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\3\5\1\u0161\7\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\7\5\1\u0162"+
    "\3\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\1\u0152\5\5\1\0\13\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\7\5\1\326\3\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\2\5\1\u0163\10\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\7\5\1\117\3\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\10\5\2\u0164\1\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\1\5\1\u0165\11\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\3\5\1\u0166\7\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\2\5\1\u0167\10\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\1\5\1\u0168\11\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\3\5\1\u0169\7\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\7\5\1\u016a\3\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\1\5\1\341\11\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\3\5\1\u016b\7\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\4\5\2\u016c\5\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\1\u016d\12\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\12\5\1\u016e\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\7\5"+
    "\1\u016f\3\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\1\5\2\u0170\3\5\1\0\13\5\10\0\1\4"+
    "\5\5\1\0\1\u0171\4\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\1\u0104\5\5"+
    "\1\0\13\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\3\5\1\u0172\7\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\4\5"+
    "\2\326\5\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\3\5\1\u0173\2\5\1\0\13\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\1\5"+
    "\1\u0174\1\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\13\5\10\0\1\4\1\5\1\u0174\3\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\2\5\1\u0175\10\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\1\u0176"+
    "\5\5\1\0\13\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\1\u0177\2\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\13\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\3\5"+
    "\1\u0178\7\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\2\5\1\u0131\10\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\12\5"+
    "\1\u0179\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\3\5\1\u017a\7\5\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\10\5\2\243"+
    "\1\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\1\5\1\243\1\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\13\5\10\0\1\4\1\5"+
    "\1\243\3\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\1\5\1\u017b\11\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\7\5\1\u017c\3\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\6\5\1\0"+
    "\7\5\1\u017d\3\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\1\u017e\5\5\1\0\13\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\4\5"+
    "\2\u017f\5\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\4\5\2\u0180\5\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\4\5"+
    "\2\u0181\5\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\10\5\2\u013b\1\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\2\5"+
    "\1\u0182\1\0\1\5\1\0\1\4\4\0\5\5\1\u0182"+
    "\1\0\13\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\1\5\2\u0183\3\5\1\0\3\5\1\u0184\7\5"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\1\5\1\u0104\11\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\1\5\1\244\1\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\13\5"+
    "\10\0\1\4\1\5\1\244\3\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\7\5\1\u0185\3\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\3\5"+
    "\1\u0186\7\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\1\5\1\u0172\11\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\1\5"+
    "\1\u0187\11\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\13\5\10\0\1\4\3\5\1\u0188"+
    "\1\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\6\5\1\0\10\5"+
    "\2\u0189\1\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\10\5\2\u018a\1\5\10\0\1\4"+
    "\5\5\1\0\5\5\1\4\7\5\2\0\1\64\3\5"+
    "\1\0\1\5\1\0\1\4\4\0\1\u018b\5\5\1\0"+
    "\13\5\10\0\1\4\5\5\1\0\5\5\1\4\7\5"+
    "\2\0\1\64\3\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\13\5\10\0\1\4\5\5\1\0\2\5"+
    "\1\u018c\2\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\12\5\1\u018d"+
    "\10\0\1\4\5\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\3\5\1\0\1\5\1\0\1\4\4\0\6\5"+
    "\1\0\7\5\1\u018e\3\5\10\0\1\4\5\5\1\0"+
    "\5\5\1\4\7\5\2\0\1\64\3\5\1\0\1\5"+
    "\1\0\1\4\4\0\6\5\1\0\13\5\10\0\1\4"+
    "\3\5\1\337\1\5\1\0\5\5\1\4\7\5\2\0"+
    "\1\64\1\u018f\2\5\1\0\1\5\1\0\1\4\4\0"+
    "\6\5\1\0\13\5\10\0\1\4\5\5\1\0\5\5"+
    "\1\4\7\5\2\0\1\64\3\5\1\0\1\5\1\0"+
    "\1\4\4\0\6\5\1\0\1\5\1\u0190\11\5\10\0"+
    "\1\4\5\5\1\0\5\5\1\4\7\5\2\0\1\64"+
    "\3\5\1\0\1\5\1\0\1\4\4\0\1\u0190\5\5"+
    "\1\0\13\5\10\0\1\4\5\5\1\0\5\5\1\4"+
    "\7\5\2\0\1\64\3\5\1\0\1\5\1\0\1\4"+
    "\4\0\6\5\1\0\12\5\1\u0191\10\0\1\4\5\5"+
    "\1\0\5\5\1\4\7\5\2\0\1\64\3\5\1\0"+
    "\1\5\1\0\1\4\4\0\6\5\1\0\4\5\2\337"+
    "\5\5\10\0\1\4\5\5\1\0\5\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\6\1\1\11\3\1\1\11\1\1\1\11\3\1"+
    "\1\11\7\1\1\11\1\1\1\11\5\1\1\11\1\1"+
    "\1\11\6\1\1\11\16\1\1\11\12\1\1\11\30\1"+
    "\2\0\4\1\4\0\4\1\2\0\15\1\2\11\46\1"+
    "\2\0\4\1\4\0\4\1\2\0\12\1\1\11\47\1"+
    "\1\0\4\1\2\0\4\1\1\0\46\1\1\0\1\1"+
    "\2\0\1\1\1\0\163\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[401];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public DaVinciConcurrenteTokenMaker() {
	}


        /**
	 * Adds the token specified to the current linked list of tokens as an
	 * "end token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType The token's type.
	 */
	private void addEndToken(int tokenType) {
		addToken(zzMarkedPos,zzMarkedPos, tokenType);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new Token();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DaVinciConcurrenteTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DaVinciConcurrenteTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 28: break;
        case 21: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 29: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 30: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 31: break;
        case 23: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 32: break;
        case 20: 
          { addToken(Token.RESERVED_WORD);
          }
        case 33: break;
        case 11: 
          { addToken(Token.SEPARATOR);
          }
        case 34: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 35: break;
        case 15: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 36: break;
        case 19: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 37: break;
        case 24: 
          { addToken(Token.FUNCTION);
          }
        case 38: break;
        case 4: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 39: break;
        case 7: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 40: break;
        case 27: 
          { addToken(Token.DATA_TYPE);
          }
        case 41: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 42: break;
        case 17: 
          { addToken(Token.ERROR_CHAR);
          }
        case 43: break;
        case 6: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 44: break;
        case 18: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 45: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 46: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 47: break;
        case 22: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 48: break;
        case 14: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.COMMENT_MULTILINE);
          }
        case 49: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 50: break;
        case 10: 
          { addToken(Token.OPERATOR);
          }
        case 51: break;
        case 9: 
          { start = zzMarkedPos-1; yybegin(MLC);
          }
        case 52: break;
        case 12: 
          { 
          }
        case 53: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 402: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 403: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 404: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
